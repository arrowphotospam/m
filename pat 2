Student.cs
namespace StudentLibrary.Models
{
    public class Student
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Age { get; set; }
        public string Grade { get; set; }
        public string Major { get; set; }
    }
}
BusinessLayer
using StudentLibrary.Models;
using System;

namespace StudentLibrary
{
    public static class BusinessLayer
    {
        public static void ValidateStudentData(Student student)
        {
            if (string.IsNullOrWhiteSpace(student.Name))
            {
                throw new ArgumentException("Name is required");
            }

            if (student.Age <= 0)
            {
                Console.WriteLine("Invalid age.");
            }

            if (string.IsNullOrWhiteSpace(student.Grade))
            {
                Console.WriteLine("Grade is required.");
            }

            if (string.IsNullOrWhiteSpace(student.Major))
            {
                Console.WriteLine("Major is required.");
            }
        }
    }
}
DataAcessLayer
using StudentLibrary.Models;
using System.Collections.Generic;
using System.Linq;

namespace StudentLibrary
{
    public static class DataAccessLayer
    {
        private static List<Student> students = new List<Student>();
        private static int nextId = 1;

        public static void AddStudent(Student student)
        {
            student.Id = nextId++;
            students.Add(student);
        }

        public static void EditStudent(Student student)
        {
            var existing = students.FirstOrDefault(s => s.Id == student.Id);
            if (existing != null)
            {
                existing.Name = student.Name;
                existing.Age = student.Age;
                existing.Grade = student.Grade;
                existing.Major = student.Major;
            }
        }

        public static List<Student> GetAllStudents()
        {
            return students;
        }

        public static List<Student> FindStudents(string keyword)
        {
            return students.Where(s =>
                s.Name.Contains(keyword) ||
                s.Grade.Contains(keyword) ||
                s.Major.Contains(keyword)).ToList();
        }

        public static void DeleteStudent(int studentId)
        {
            var student = students.FirstOrDefault(s => s.Id == studentId);
            if (student != null)
            {
                students.Remove(student);
            }
        }
    }
}
Program.cs
using StudentLibrary;
using StudentLibrary.Models;
using System;

namespace StudentApp
{
    class Program
    {
        static void Main()
        {
            while (true)
            {
                Console.WriteLine("\nMenu:");
                Console.WriteLine("1. Add Student");
                Console.WriteLine("2. Edit Student");
                Console.WriteLine("3. List Students");
                Console.WriteLine("4. Find Student");
                Console.WriteLine("5. Delete Student");
                Console.WriteLine("6. Exit");

                Console.Write("Enter your choice: ");
                var choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        AddStudent();
                        break;
                    case "2":
                        EditStudent();
                        break;
                    case "3":
                        ListStudents();
                        break;
                    case "4":
                        FindStudent();
                        break;
                    case "5":
                        DeleteStudent();
                        break;
                    case "6":
                        return;
                    default:
                        Console.WriteLine("Invalid choice!");
                        break;
                }
            }
        }

        static void AddStudent()
        {
            try
            {
                var student = ReadStudentDetails();
                BusinessLayer.ValidateStudentData(student);
                DataAccessLayer.AddStudent(student);
                Console.WriteLine("Student added successfully.");
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        static void EditStudent()
        {
            Console.Write("Enter Student Id to Edit: ");
            int id = int.Parse(Console.ReadLine());

            var student = ReadStudentDetails();
            student.Id = id;

            BusinessLayer.ValidateStudentData(student);
            DataAccessLayer.EditStudent(student);
            Console.WriteLine("Student updated.");
        }

        static void ListStudents()
        {
            var students = DataAccessLayer.GetAllStudents();
            foreach (var s in students)
            {
                PrintStudent(s);
            }
        }

        static void FindStudent()
        {
            Console.Write("Enter keyword to search: ");
            string keyword = Console.ReadLine();

            var results = DataAccessLayer.FindStudents(keyword);
            foreach (var s in results)
            {
                PrintStudent(s);
            }
        }

        static void DeleteStudent()
        {
            Console.Write("Enter Student Id to Delete: ");
            int id = int.Parse(Console.ReadLine());

            DataAccessLayer.DeleteStudent(id);
            Console.WriteLine("Student deleted.");
        }

        static Student ReadStudentDetails()
        {
            Console.Write("Name: ");
            string name = Console.ReadLine();

            Console.Write("Age: ");
            int age = int.Parse(Console.ReadLine());

            Console.Write("Grade: ");
            string grade = Console.ReadLine();

            Console.Write("Major: ");
            string major = Console.ReadLine();

            return new Student
            {
                Name = name,
                Age = age,
                Grade = grade,
                Major = major
            };
        }

        static void PrintStudent(Student s)
        {
            Console.WriteLine($"Id: {s.Id}, Name: {s.Name}, Age: {s.Age}, Grade: {s.Grade}, Major: {s.Major}");
        }
    }
}
